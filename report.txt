1. The player and goodie interaction and the the function that detects co-location of the two objects is located in the Collectible class, which is a base class for all types of goodies and the exit. This interaction is in this class and not the player class because the player's action function doSomething() only involves the movement of the player. If the co-location of the player and the goodie is detected (calls a StudentWorld function called isPlayerAt(x, y) on the goodie's current coordinate and the Actor function getWorld() returns the current world) and the item is not stolen by a thief bot (isStolen() function from the Actor class), the StudentWorld obtained through getWorld() calls the StudentWorld object to increase the player's points by m_points (data member to store the value of each goodie) through increaseScore(int howMuch) from the GameWorld class. The function will then play a sound by calling getWorld()->playSound(SOUND_GOT_GOODIE) in a similar method to increasing the score. Then, the Goodie object will call a doActivity() function, which is a pure virtual function that will do any action specific to the type of goodie. If the goodie directly affects the player, getWorld()->getPlayer()->someMutatorFunction() in the Player class will be called to perform the specified action. If the goodie is directly related to the world or level, getWorld()->someMutatorFunction() in the StudentWorld or GameWorld class will be called to execute the action. Afterwards, the changeHP(int nhp) function from the Actor class will be called the set the HP of the goodie to be 0 so that it can be removed in the StudentWorld removeDeadEntries() function can delete it and remove its pointer from the list of actors.

2. All Actors are implemented

3. If a Thiefbot with a stolen goodie dies on top of a crystal or another goodie, the goodies or crystal will overlap.